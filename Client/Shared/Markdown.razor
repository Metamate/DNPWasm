@using Markdig
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@HtmlContent

@code
{
    private string _content;

    public MarkupString HtmlContent { get; private set; }

    [Parameter]
    public string Content
    {
        get => _content;
        set
        {
            _content = value;
            HtmlContent = BuildHtmlFromMarkdown(_content);
            StateHasChanged();
        }
    }

    [Parameter]
    public string Url { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Content ??= string.IsNullOrEmpty(Url)
            ? "Content or Url property is not set or invalid"
            : await InitContentFromUrl();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("Prism.highlightAll");
    }

    // TODO: Sanitize before returning (but only if we change to user generated content...)
    private static MarkupString BuildHtmlFromMarkdown(string value)
    {
        var html = value == null ? "" : Markdig.Markdown.ToHtml(
            markdown: value,
            pipeline: new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .Build()
        );

        return new MarkupString(html);
    }

    private async Task<string> InitContentFromUrl()
    {
        try
        {
            var httpResponse = await Http.GetAsync(Url);
            return httpResponse.IsSuccessStatusCode ?
                await httpResponse.Content.ReadAsStringAsync() : httpResponse.ReasonPhrase;
        }
        catch (Exception e)
        {
            //TODO: Log
            Console.WriteLine(e.ToString());
        }
        return string.Empty;
    }

}